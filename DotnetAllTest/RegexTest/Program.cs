// See https://aka.ms/new-console-template for more information
using System.Text.RegularExpressions;

Console.WriteLine("Hello, World!");
const string EntityRegPattern = @"\[\[[^\[\]]*]]";
string query = " [[HostPoolMetrics_Connection_Completed | ActivityId,Timestamp,ResultType,SessionHostAzureVmId,GatewayRegion,State,ResourceId,AadTenantId,ClientOS,Category,ClientType,SessionHostName,SessionHostOSVersion,SessionHostOSDescription, UdpUse, UdpType]]| union ([[HostPoolMetrics_Connection|ActivityId,Timestamp,ResultType,SessionHostAzureVmId,GatewayRegion,State,ResourceId,AadTenantId,ClientOS,Category,ClientType,SessionHostName,SessionHostOSVersion,SessionHostOSDescription, UdpUse, UdpType]] | where ingestion_time() &gt; ago(15m) and State == \"Completed\"\r\n                    | join kind = leftantisemi  ([[DiagActivityScrub_Filtered|ActivityId]]| distinct  ActivityId) on $left.ActivityId == $right.ActivityId)\r\n                    | summarize hint.strategy=shuffle arg_max(Timestamp, *) by ActivityId\r\n                    | extend EndDate = todatetime(Timestamp), Outcome = ResultType, VmId = SessionHostAzureVmId\r\n                    | join ([[HostPoolMetrics_Connection_Started|ActivityId,Timestamp,ResultType,SessionHostAzureVmId,GatewayRegion,State,ResourceId,AadTenantId,ClientOS,Category,ClientType,SessionHostName,SessionHostOSVersion,SessionHostOSDescription]] | summarize hint.strategy=shuffle arg_max(Timestamp, *) by ActivityId\r\n                    | extend  StartDate = todatetime(Timestamp))\r\n                    on ActivityId\r\n                    | join kind= inner ((DeviceEntity_MV|project ChangeType,VmId,UniqueId,AADDeviceId,Environment,StampName,CustomerTenantId\r\n                    | extend TenantId = CustomerTenantId\r\n                    | where ChangeType != 'Delete' and isnotempty(VmId)\r\n                    | join kind = inner\r\n                    (WorkspaceEntity_MV|project Status,ChangeType,DisplayStatus,DeviceId,StampName,TenantId\r\n                    | where Status =~ 'Provisioned' and ChangeType != 'Delete' and DisplayStatus !in ('deprovisionFailed', 'reprovisionFailed', 'inGracePeriod','provisioning'))\r\n                    on $left.UniqueId== $right.DeviceId, $left.TenantId == $right.TenantId)\r\n                    | extend AadDeviceId = tostring(AADDeviceId), StampName = StampName, Environment = Environment)\r\n                    on VmId\r\n                    | extend SessionHostPoolName = tolower(split(ResourceId, \"/\")[-1]), ActivityPreciseTimeStamp = todatetime(Timestamp), ActivityTIMESTAMP = todatetime(Timestamp), StartTime = tostring(StartDate),EndTime = tostring(EndDate)\r\n                    | project DPUData__IngestedTimestamp = now(), ActivityId, AadTenantId,AadDeviceId = iff(isempty( AADDeviceId),\"&lt;&gt;\", AADDeviceId), ActivityPreciseTimeStamp,ActivityTIMESTAMP, Region = \"\", StartTime,EndTime, StartDate,EndDate, ClientOS,StampName = iff(isempty( StampName), \"&lt;&gt;\", StampName) ,Environment = iif(isempty( Environment), \"&lt;&gt;\", Environment), Type = Category, Outcome,SessionHostPoolId = \"&lt;&gt;\",SessionHostPoolName, SessionHostName, SessionHostAzureVmId,ClientType,ArmPath = tolower(ResourceId),AgentOSVersion = SessionHostOSVersion,AgentOSDescription = SessionHostOSDescription, UdpUse, UdpType";

var regex = new Regex(EntityRegPattern);
MatchCollection matches = regex.Matches(query.Trim());

foreach (Match item in matches)
{
    Console.WriteLine(item.Value);
    var tmp1 = item.Value.Trim(']', '[').Trim();
    string[] searchStringFields = tmp1.Split('|');
    Console.WriteLine(searchStringFields[0]);
    Console.WriteLine("");
}
